// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Use an environment variable for the database connection string
  url      = env("DATABASE_URL")
}

// Model untuk Autentikasi (wajib untuk NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // For email/password login (hashed with argon2)
  accounts      Account[]
  sessions      Session[]
  roadmaps      Roadmap[] // Relasi ke Roadmap
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model untuk menyimpan data Roadmap kita
model Roadmap {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Menyimpan seluruh output AI sebagai JSON
  content     Json
  contentHash String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Publikasi
  published   Boolean   @default(false)
  slug        String?   @unique
  publishedAt DateTime?
  verified    Boolean   @default(false)

  progress RoadmapProgress?

  // Jika roadmap ini hasil fork dari roadmap lain, simpan id sumbernya
  sourceId String?

  @@unique([userId, sourceId])
  @@index([userId, contentHash, title])
}

enum Role {
  USER
  ADMIN
}

model RoadmapProgress {
  id             String   @id @default(cuid())
  roadmapId      String   @unique
  roadmap        Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  // Simpan daftar task yang sudah selesai dalam bentuk array indeks: { "m-<i>-t-<j>": true }
  completedTasks Json     @default("{}")
  percent        Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Community ratings (1..5) with optional short review
model RoadmapRating {
  id        String   @id @default(cuid())
  roadmapId String
  versionId String?
  userId    String
  stars     Int
  review    String?  @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roadmapId, versionId, userId])
  @@index([roadmapId, versionId])
  @@index([userId])
}

// Denormalized aggregates for fast display
model RoadmapAggregates {
  roadmapId     String   @id
  versionId     String?
  avgStars      Float    @default(0)
  ratingsCount  Int      @default(0)
  h1            Int      @default(0)
  h2            Int      @default(0)
  h3            Int      @default(0)
  h4            Int      @default(0)
  h5            Int      @default(0)
  savesCount    Int      @default(0)
  forksCount    Int      @default(0)
  wilsonScore   Float    @default(0)
  bayesianScore Float    @default(0)
  updatedAt     DateTime @updatedAt
}

// Unique saves per user (treat as intent to download)
model RoadmapSave {
  id        String   @id @default(cuid())
  roadmapId String
  userId    String
  createdAt DateTime @default(now())

  @@unique([roadmapId, userId])
  @@index([roadmapId])
  @@index([userId])
}

// Optional daily metrics for trends
model RoadmapMetricsDaily {
  id            String   @id @default(cuid())
  roadmapId     String
  date          DateTime
  views         Int      @default(0)
  uniqueViewers Int      @default(0)
  saves         Int      @default(0)
  uniqueSavers  Int      @default(0)
  forks         Int      @default(0)

  @@unique([roadmapId, date])
  @@index([roadmapId])
}

// High-level controlled taxonomy of topics
model Topic {
  id           String         @id @default(cuid())
  slug         String         @unique
  name         String
  parentId     String?
  aliases      String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RoadmapTopic RoadmapTopic[]

  @@index([parentId])
}

// Assigned topics for a roadmap (multi-label, one primary recommended)
model RoadmapTopic {
  id         String   @id @default(cuid())
  roadmapId  String
  versionId  String?
  topicId    String
  topic      Topic    @relation(fields: [topicId], references: [id])
  confidence Float    @default(0)
  isPrimary  Boolean  @default(false)
  source     String   @default("ai") // ai|author|admin
  createdAt  DateTime @default(now())

  @@unique([roadmapId, versionId, topicId])
  @@index([roadmapId])
  @@index([topicId])
}
